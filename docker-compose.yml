version: "3"

services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:2.11-1.1.0
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    links:
      - "zookeeper"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "
        monitoring-websocket:1:1,
        websocket-monitoring:1:1,
        aquarium-websocket:1:1,
        websocket-aquarium:1:1,
        aquarium-scheduling:1:1,
        scheduling-websocket:1:1,
        scheduling-notification:1:1
      "
  mongo-aquatop:
    image: mongo
    container_name: mongo-aquatop
    restart: always
    ports:
      - "27017:27017"

  user-microservice:
    container_name: user-microservice
    build: ${USER_BUILD}
    command: bash -c "yarn && yarn dev"
    links:
      - "mongo-aquatop"
    environment:
      - NODE_ENV=${NODE_ENV}
      - APP_SECRET=${APP_SECRET}
      - MONGO_URL=${MONGO_USER_URL}
      - KAFKA_URL=kafka:9092
      - TZ=America/Sao_Paulo

  aquarium-microservice:
    container_name: aquarium-microservice
    build: ${AQUARIUM_BUILD}
    command: bash -c "yarn && yarn dev"
    links:
      - "kafka"
      - "mongo-aquatop"
    environment:
      - NODE_ENV=${NODE_ENV}
      - APP_SECRET=${APP_SECRET}
      - MONGO_URL=${MONGO_AQUARIUM_URL}
      - KAFKA_URL=kafka:9092
      - TZ=America/Sao_Paulo

  monitoring-microservice:
    container_name: monitoring-microservice
    build: ${MONITORING_BUILD}
    command: bash -c "yarn && yarn dev"
    links:
      - "kafka"
      - "mongo-aquatop"
    environment:
      - NODE_ENV=${NODE_ENV}
      - APP_SECRET=${APP_SECRET}
      - MONGO_URL=${MONGO_MONITORING_URL}
      - KAFKA_URL=kafka:9092
      - TZ=America/Sao_Paulo

  notification-microservice:
    container_name: notification-microservice
    build: ${NOTIFICATION_BUILD}
    command: bash -c "yarn && yarn dev"
    links:
      - "kafka"
      - "mongo-aquatop"
    environment:
      - NODE_ENV=${NODE_ENV}
      - APP_SECRET=${APP_SECRET}
      - MONGO_URL=${MONGO_NOTIFICATION_URL}
      - KAFKA_URL=kafka:9092
      - TZ=America/Sao_Paulo

  scheduling-worker:
    container_name: scheduling-worker
    build: ${SCHEDULING_BUILD}
    command: bash -c "yarn && yarn dev"
    links:
      - "kafka"
      - "mongo-aquatop"
    environment:
      - KAFKA_URL=kafka:9092
      - MONGO_URL=${MONGO_SCHEDULING_URL}
      - TZ=America/Sao_Paulo

  websocket-server:
    container_name: websocket-server
    build: ${WEBSOCKET_BUILD}
    command: bash -c "yarn && yarn dev"
    links:
      - "kafka"
    environment:
      - KAFKA_URL=kafka:9092
      - TZ=America/Sao_Paulo

  nginx:
    image: nginx:1.15-alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    links:
      - "user-microservice"
      - "aquarium-microservice"
      - "monitoring-microservice"
      - "websocket-server"
      - "notification-microservice"
